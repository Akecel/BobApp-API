# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      # 
      # - image: redis:2.8.19

    steps:
      - checkout




      - run: sudo apt-get update && sudo apt-get install -y zlib1g-dev libsqlite3-dev libfreetype6-dev libjpeg62-turbo-dev libpng-dev
      - run: sudo docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
      - run: sudo docker-php-ext-install -j$(nproc) gd
      - run: sudo docker-php-ext-install -j$(nproc) zip


      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
          # "composer.lock" can be used if it is committed to the repo
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache

      - restore_cache:
          keys:
            - node-v3-{{ checksum "package.json" }}
            - node-v3-
      - run: yarn install
      - save_cache:
          key: node-v3-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database
      - run: touch database/database.sqlite
      - run: php artisan migrate --seed --env=testing --database=sqlite --force

      # run tests with phpunit
      #- run: ./vendor/bin/phpunit
      - run: phpdbg -qrr vendor/bin/phpunit --coverage-clover build/logs/clover.xml
      - run: wget https://github.com/satooshi/php-coveralls/releases/download/v1.0.1/coveralls.phar
      - run: php coveralls.phar --verbose
      - store_test_results:
          path: tests/_output
      - store_artifacts:
          path: tests/_output